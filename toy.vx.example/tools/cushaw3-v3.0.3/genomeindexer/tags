!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AC_KSEQ_H	kseq.h	27;"	d
ALL_ONE_MASK	bwt_gen.h	37;"	d
ALPHABET_SIZE	bwt_gen.h	28;"	d
AR	Makefile	/^AR = ar$/;"	m
BITS_IN_BYTE	bwt_gen.h	34;"	d
BITS_IN_WORD	bwt_gen.h	33;"	d
BITS_PER_OCC_VALUE	bwt_gen.h	40;"	d
BIT_PER_CHAR	bwt_gen.h	29;"	d
BWA_BWT_H	bwt.h	29;"	d
BWA_MAIN_H	main.h	2;"	d
BWA_UBYTE	bntseq.h	35;"	d
BWA_UBYTE	bwt.h	37;"	d
BWT	bwt_gen.h	/^typedef struct BWT {$/;"	s
BWT	bwt_gen.h	/^} BWT;$/;"	t	typeref:struct:BWT
BWTClearTrailingBwtCode	bwt_gen.c	/^void BWTClearTrailingBwtCode(BWT *bwt) {$/;"	f
BWTCreate	bwt_gen.c	/^BWT *BWTCreate(const unsigned int textLength, unsigned int *decodeTable) {$/;"	f
BWTFileSizeInWord	bwt_gen.c	/^static unsigned int BWTFileSizeInWord(const unsigned int numChar) {$/;"	f	file:
BWTFree	bwt_gen.c	/^void BWTFree(BWT *bwt) {$/;"	f
BWTGenerateOccValueFromBwt	bwt_gen.c	/^void BWTGenerateOccValueFromBwt(const unsigned int* bwt,$/;"	f
BWTINC_INSERT_SORT_NUM_ITEM	bwt_gen.h	48;"	d
BWTINDEX_H_	bwtindex.h	9;"	d
BWTInc	bwt_gen.h	/^typedef struct BWTInc {$/;"	s
BWTInc	bwt_gen.h	/^} BWTInc;$/;"	t	typeref:struct:BWTInc
BWTIncBuildBwt	bwt_gen.c	/^static void BWTIncBuildBwt(unsigned int* seq, const unsigned int *relativeRank,$/;"	f	file:
BWTIncBuildPackedBwt	bwt_gen.c	/^static void BWTIncBuildPackedBwt(const unsigned int *relativeRank,$/;"	f	file:
BWTIncBuildRelativeRank	bwt_gen.c	/^static void BWTIncBuildRelativeRank(unsigned int* __restrict sortedRank,$/;"	f	file:
BWTIncConstruct	bwt_gen.c	/^static void BWTIncConstruct(BWTInc *bwtInc, const unsigned int numChar) {$/;"	f	file:
BWTIncConstructFromPacked	bwt_gen.c	/^BWTInc *BWTIncConstructFromPacked(const char *inputFileName,$/;"	f
BWTIncCreate	bwt_gen.c	/^BWTInc *BWTIncCreate(const unsigned int textLength, const float targetNBit,$/;"	f
BWTIncFree	bwt_gen.c	/^void BWTIncFree(BWTInc *bwtInc) {$/;"	f
BWTIncGetAbsoluteRank	bwt_gen.c	/^static unsigned int BWTIncGetAbsoluteRank(BWT *bwt,$/;"	f	file:
BWTIncMergeBwt	bwt_gen.c	/^static void BWTIncMergeBwt(const unsigned int *sortedRank,$/;"	f	file:
BWTIncPutPackedTextToRank	bwt_gen.c	/^static void BWTIncPutPackedTextToRank(const unsigned int *packedText,$/;"	f	file:
BWTIncSetBuildSizeAndTextAddr	bwt_gen.c	/^static void BWTIncSetBuildSizeAndTextAddr(BWTInc *bwtInc) {$/;"	f	file:
BWTIncSortKey	bwt_gen.c	/^static void BWTIncSortKey(unsigned int* __restrict key,$/;"	f	file:
BWTOccValue	bwt_gen.c	/^unsigned int BWTOccValue(const BWT *bwt, unsigned int index,$/;"	f
BWTOccValueExplicit	bwt_gen.c	/^static inline unsigned int BWTOccValueExplicit(const BWT *bwt,$/;"	f	file:
BWTOccValueMajorSizeInWord	bwt_gen.c	/^static unsigned int BWTOccValueMajorSizeInWord(const unsigned int numChar) {$/;"	f	file:
BWTOccValueMinorSizeInWord	bwt_gen.c	/^static unsigned int BWTOccValueMinorSizeInWord(const unsigned int numChar) {$/;"	f	file:
BWTResidentSizeInWord	bwt_gen.c	/^static unsigned int BWTResidentSizeInWord(const unsigned int numChar) {$/;"	f	file:
BWTSaveBwtCodeAndOcc	bwt_gen.c	/^void BWTSaveBwtCodeAndOcc(const BWT *bwt, const char *bwtFileName,$/;"	f
BWT_BNTSEQ_H	bntseq.h	29;"	d
BWT_GEN_H	bwt_gen.h	26;"	d
BYTES_IN_WORD	bwt_gen.h	35;"	d
BackwardDNAOccCount	bwt_gen.c	/^static unsigned int BackwardDNAOccCount(const unsigned int* dna,$/;"	f	file:
BitPerBytePackedChar	bwt_gen.c	/^static unsigned int BitPerBytePackedChar(const unsigned int alphabetSize) {$/;"	f	file:
BitPerWordPackedChar	bwt_gen.c	/^static unsigned int BitPerWordPackedChar(const unsigned int alphabetSize) {$/;"	f	file:
CC	Makefile	/^CC = gcc$/;"	m
CCFLAGS	Makefile	/^CCFLAGS = -O3 -funroll-loops -I $(src_dir) $/;"	m
CHAR_PER_BYTE	bwt_gen.h	31;"	d
CHAR_PER_WORD	bwt_gen.h	30;"	d
ConvertBytePackedToWordPacked	bwt_gen.c	/^static void ConvertBytePackedToWordPacked(const unsigned char *input,$/;"	f	file:
DNA_OCC_CNT_TABLE_SIZE_IN_WORD	bwt_gen.h	38;"	d
DNA_OCC_SUM_EXCEPTION	bwt_gen.h	57;"	d
EQUAL_KEY_THRESHOLD	bwt_gen.c	672;"	d	file:
FALSE	bwt_gen.h	46;"	d
ForwardDNAAllOccCountNoLimit	bwt_gen.c	/^static void ForwardDNAAllOccCountNoLimit(const unsigned int* dna,$/;"	f	file:
ForwardDNAOccCount	bwt_gen.c	/^static unsigned int ForwardDNAOccCount(const unsigned int* dna,$/;"	f	file:
GenerateDNAOccCountTable	bwt_gen.c	/^static void GenerateDNAOccCountTable(unsigned int *dnaDecodeTable) {$/;"	f	file:
INSERT_SORT_NUM_ITEM	QSufSort.h	33;"	d
KEY	QSufSort.h	32;"	d
KSEQ_INIT	kseq.h	202;"	d
KSTREAM_INIT	kseq.h	124;"	d
KSTRING_T	kseq.h	73;"	d
L2	bwt.h	/^	bwtint_t L2[5]; \/\/ C(), cumulative count$/;"	m	struct:__anon4
LH3_UTILS_H	utils.h	29;"	d
OCC_INTERVAL	bwt.h	34;"	d
OCC_INTERVAL	bwt_gen.h	42;"	d
OCC_INTERVAL_MAJOR	bwt_gen.h	43;"	d
OCC_VALUE_PER_WORD	bwt_gen.h	41;"	d
QSufSortBucketSort	QSufSort.c	/^static void QSufSortBucketSort(int* __restrict V, int* __restrict I,$/;"	f	file:
QSufSortChoosePivot	QSufSort.c	/^static int QSufSortChoosePivot(int* __restrict V, int* __restrict I,$/;"	f	file:
QSufSortGenerateSaFromInverse	QSufSort.c	/^void QSufSortGenerateSaFromInverse(const int* V, int* __restrict I,$/;"	f
QSufSortInsertSortSplit	QSufSort.c	/^static void QSufSortInsertSortSplit(int* __restrict V, int* __restrict I,$/;"	f	file:
QSufSortSortSplit	QSufSort.c	/^static void QSufSortSortSplit(int* __restrict V, int* __restrict I,$/;"	f	file:
QSufSortSuffixSort	QSufSort.c	/^void QSufSortSuffixSort(int* __restrict V, int* __restrict I, const int numChar,$/;"	f
QSufSortTransform	QSufSort.c	/^static int QSufSortTransform(int* __restrict V, int* __restrict I,$/;"	f	file:
SaIndexRange	bwt_gen.h	/^typedef struct SaIndexRange {$/;"	s
SaIndexRange	bwt_gen.h	/^} SaIndexRange;$/;"	t	typeref:struct:SaIndexRange
TRUE	bwt_gen.h	45;"	d
TextLengthFromBytePacked	bwt_gen.c	/^static unsigned int TextLengthFromBytePacked(unsigned int bytePackedLength,$/;"	f	file:
__KSEQ_BASIC	kseq.h	130;"	d
__KSEQ_READ	kseq.h	155;"	d
__KSEQ_TYPE	kseq.h	195;"	d
__KS_BASIC	kseq.h	43;"	d
__KS_GETC	kseq.h	59;"	d
__KS_GETUNTIL	kseq.h	84;"	d
__KS_TYPE	kseq.h	33;"	d
__QSUFSORT_H__	QSufSort.h	30;"	d
__kstring_t	kseq.h	/^typedef struct __kstring_t {$/;"	s
__occ_aux	bwt.c	/^static inline int __occ_aux(uint64_t y, int c) {$/;"	f	file:
__occ_aux4	bwt.c	168;"	d	file:
amb	bntseq.h	/^	char amb;$/;"	m	struct:__anon2
ambs	bntseq.h	/^	bntamb1_t *ambs; \/\/ n_holes elements$/;"	m	struct:__anon3
anno	bntseq.h	/^	char *name, *anno;$/;"	m	struct:__anon1
anns	bntseq.h	/^	bntann1_t *anns; \/\/ n_seqs elements$/;"	m	struct:__anon3
availableWord	bwt_gen.h	/^	unsigned int availableWord;$/;"	m	struct:BWTInc
average	bwt_gen.h	50;"	d
bns_coor_pac2real	bntseq.c	/^int bns_coor_pac2real(const bntseq_t *bns, int64_t pac_coor, int len,$/;"	f
bns_destroy	bntseq.c	/^void bns_destroy(bntseq_t *bns) {$/;"	f
bns_dump	bntseq.c	/^void bns_dump(const bntseq_t *bns, const char *prefix) {$/;"	f
bns_fasta2bntseq	bntseq.c	/^void bns_fasta2bntseq(gzFile fp_fa, const char *prefix) {$/;"	f
bns_restore	bntseq.c	/^bntseq_t *bns_restore(const char *prefix) {$/;"	f
bns_restore_core	bntseq.c	/^bntseq_t *bns_restore_core(const char *ann_filename, const char* amb_filename,$/;"	f
bntamb1_t	bntseq.h	/^} bntamb1_t;$/;"	t	typeref:struct:__anon2
bntann1_t	bntseq.h	/^} bntann1_t;$/;"	t	typeref:struct:__anon1
bntseq_t	bntseq.h	/^} bntseq_t;$/;"	t	typeref:struct:__anon3
buildSize	bwt_gen.h	/^	unsigned int buildSize;$/;"	m	struct:BWTInc
bwa_bwt2sa	bwtmisc.c	/^int bwa_bwt2sa(int argc, char *argv[]) {$/;"	f
bwa_bwtupdate	bwtmisc.c	/^int bwa_bwtupdate(int argc, char *argv[]) {$/;"	f
bwa_fa2pac	bntseq.c	/^int bwa_fa2pac(int argc, char *argv[]) {$/;"	f
bwa_pac2bwt	bwtmisc.c	/^int bwa_pac2bwt(int argc, char *argv[]) {$/;"	f
bwa_pac2cspac	bwtmisc.c	/^int bwa_pac2cspac(int argc, char *argv[]) {$/;"	f
bwa_pac2cspac_core	bwtmisc.c	/^uint8_t *bwa_pac2cspac_core(const bntseq_t *bns) {$/;"	f
bwa_pac_rev	bwtmisc.c	/^int bwa_pac_rev(int argc, char *argv[]) {$/;"	f
bwa_pac_rev_core	bwtmisc.c	/^void bwa_pac_rev_core(const char *fn, const char *fn_rev) {$/;"	f
bwa_seq_len	bwtmisc.c	/^int64_t bwa_seq_len(const char *fn_pac) {$/;"	f
bwt	bwt.h	/^	uint32_t *bwt; \/\/ BWT$/;"	m	struct:__anon4
bwt	bwt_gen.h	/^	BWT *bwt;$/;"	m	struct:BWTInc
bwtCode	bwt_gen.h	/^	unsigned int *bwtCode; \/\/ BWT code$/;"	m	struct:BWT
bwtSizeInWord	bwt_gen.h	/^	unsigned int bwtSizeInWord; \/\/ Temporary variable to hold the memory allocated$/;"	m	struct:BWT
bwt_2occ	bwt.c	/^inline void bwt_2occ(const bwt_t *bwt, bwtint_t k, bwtint_t l, ubyte_t c,$/;"	f
bwt_2occ4	bwt.c	/^inline void bwt_2occ4(const bwt_t *bwt, bwtint_t k, bwtint_t l,$/;"	f
bwt_B0	bwt.h	61;"	d
bwt_B00	bwtmisc.c	121;"	d	file:
bwt_bwt	bwt.h	56;"	d
bwt_bwtgen	bwt_gen.c	/^void bwt_bwtgen(const char *fn_pac, const char *fn_bwt) {$/;"	f
bwt_bwtgen_main	bwt_gen.c	/^int bwt_bwtgen_main(int argc, char *argv[]) {$/;"	f
bwt_bwtupdate_core	bwtmisc.c	/^void bwt_bwtupdate_core(bwt_t *bwt) {$/;"	f
bwt_cal_sa	bwt.c	/^void bwt_cal_sa(bwt_t *bwt, int intv) {$/;"	f
bwt_destroy	bwtio.c	/^void bwt_destroy(bwt_t *bwt) {$/;"	f
bwt_dump_bwt	bwtio.c	/^void bwt_dump_bwt(const char *fn, const bwt_t *bwt) {$/;"	f
bwt_dump_sa	bwtio.c	/^void bwt_dump_sa(const char *fn, const bwt_t *bwt) {$/;"	f
bwt_gen_cnt_table	bwt.c	/^void bwt_gen_cnt_table(bwt_t *bwt) {$/;"	f
bwt_invPsi	bwt.h	66;"	d
bwt_match_exact	bwt.c	/^int bwt_match_exact(const bwt_t *bwt, int len, const ubyte_t *str,$/;"	f
bwt_match_exact_alt	bwt.c	/^int bwt_match_exact_alt(const bwt_t *bwt, int len, const ubyte_t *str,$/;"	f
bwt_occ	bwt.c	/^inline bwtint_t bwt_occ(const bwt_t *bwt, bwtint_t k, ubyte_t c) {$/;"	f
bwt_occ4	bwt.c	/^inline void bwt_occ4(const bwt_t *bwt, bwtint_t k, bwtint_t cnt[4]) {$/;"	f
bwt_occ_intv	bwt.h	63;"	d
bwt_pac2bwt	bwtmisc.c	/^bwt_t *bwt_pac2bwt(const char *fn_pac, int use_is) {$/;"	f
bwt_restore_bwt	bwtio.c	/^bwt_t *bwt_restore_bwt(const char *fn) {$/;"	f
bwt_restore_sa	bwtio.c	/^void bwt_restore_sa(const char *fn, bwt_t *bwt) {$/;"	f
bwt_sa	bwt.c	/^bwtint_t bwt_sa(const bwt_t *bwt, bwtint_t k) {$/;"	f
bwt_size	bwt.h	/^	bwtint_t bwt_size; \/\/ size of bwt, about seq_len\/4$/;"	m	struct:__anon4
bwt_t	bwt.h	/^} bwt_t;$/;"	t	typeref:struct:__anon4
bwtint_t	bwt.h	/^typedef uint32_t bwtint_t;$/;"	t
c_sources	Makefile	/^c_sources = bntseq.c bwt.c bwt_gen.c bwtindex.c QSufSort.c utils.c bwtmisc.c bwtio.c is.c$/;"	m
ceilLog2	bwt_gen.c	/^static unsigned int ceilLog2(const unsigned int input) {$/;"	f	file:
chr	is.c	30;"	d	file:
cnt_table	bwt.h	/^	uint32_t cnt_table[256];$/;"	m	struct:__anon4
cumulativeCountInCurrentBuild	bwt_gen.h	/^	unsigned int *cumulativeCountInCurrentBuild;$/;"	m	struct:BWTInc
cumulativeFreq	bwt_gen.h	/^	unsigned int *cumulativeFreq; \/\/ cumulative frequency$/;"	m	struct:BWT
cushaw2_index	bwtindex.c	/^int cushaw2_index(int argc, char *argv[]) {$/;"	f
decodeTable	bwt_gen.h	/^	unsigned int *decodeTable; \/\/ For decoding BWT by table lookup$/;"	m	struct:BWT
decodeTableGenerated	bwt_gen.h	/^	unsigned int decodeTableGenerated; \/\/ == TRUE if decode table is generated on load and will be freed$/;"	m	struct:BWT
endSaIndex	bwt_gen.h	/^	unsigned int endSaIndex;$/;"	m	struct:SaIndexRange
err_fatal	utils.c	/^void err_fatal(const char *header, const char *fmt, ...) {$/;"	f
err_fatal_simple	utils.h	34;"	d
err_fatal_simple_core	utils.c	/^void err_fatal_simple_core(const char *func, const char *msg) {$/;"	f
err_xopen_core	utils.c	/^FILE *err_xopen_core(const char *func, const char *fn, const char *mode) {$/;"	f
err_xzopen_core	utils.c	/^gzFile err_xzopen_core(const char *func, const char *fn, const char *mode) {$/;"	f
firstCharInLastIteration	bwt_gen.h	/^	unsigned int firstCharInLastIteration;$/;"	m	struct:BWTInc
fp_pac	bntseq.h	/^	FILE *fp_pac;$/;"	m	struct:__anon3
getBuckets	is.c	/^static void getBuckets(const int *C, int *B, int k, int end) {$/;"	f	file:
getCounts	is.c	/^static void getCounts(const unsigned char *T, int *C, int n, int k, int cs) {$/;"	f	file:
gi	bntseq.h	/^	uint32_t gi;$/;"	m	struct:__anon1
incMaxBuildSize	bwt_gen.h	/^	unsigned int incMaxBuildSize;$/;"	m	struct:BWTInc
induceSA	is.c	/^static void induceSA(const unsigned char *T, int *SA, int *C, int *B, int n,$/;"	f	file:
initialMaxBuildSize	bwt_gen.h	/^	unsigned int initialMaxBuildSize;$/;"	m	struct:BWTInc
initializeVAL	bwt_gen.c	/^static void initializeVAL(unsigned int *startAddr, const unsigned int length,$/;"	f	file:
inverseSa	bwt_gen.h	/^	unsigned int *inverseSa; \/\/ Inverse SA stored explicitly$/;"	m	struct:BWT
inverseSa0	bwt_gen.h	/^	unsigned int inverseSa0; \/\/ SA-1[0]$/;"	m	struct:BWT
inverseSaInterval	bwt_gen.h	/^	unsigned int inverseSaInterval; \/\/ interval between two inverse SA stored explicitly$/;"	m	struct:BWT
inverseSaSize	bwt_gen.h	/^	unsigned int inverseSaSize; \/\/ Temporary variable to hold the memory allocated$/;"	m	struct:BWT
is_bwt	is.c	/^int is_bwt(ubyte_t *T, int n) {$/;"	f
is_sa	is.c	/^int is_sa(const ubyte_t *T, int *SA, int n) {$/;"	f
kroundup32	kseq.h	81;"	d
ks_eof	kseq.h	40;"	d
ks_rewind	kseq.h	41;"	d
kstring_t	kseq.h	/^} kstring_t;$/;"	t	typeref:struct:__kstring_t
l	kseq.h	/^	size_t l, m;$/;"	m	struct:__kstring_t
l_pac	bntseq.h	/^	int64_t l_pac;$/;"	m	struct:__anon3
leadingZero	QSufSort.c	/^static unsigned int leadingZero(const unsigned int input) {$/;"	f	file:
leadingZero	bwt_gen.c	/^unsigned int leadingZero(const unsigned int input) {$/;"	f
len	bntseq.h	/^	int32_t len;$/;"	m	struct:__anon1
len	bntseq.h	/^	int32_t len;$/;"	m	struct:__anon2
m	kseq.h	/^	size_t l, m;$/;"	m	struct:__kstring_t
main	bwt_gen.c	/^int main(int argc, char *argv[])$/;"	f
max	bwt_gen.h	52;"	d
med3	bwt_gen.h	53;"	d
min	bwt_gen.h	51;"	d
n_ambs	bntseq.h	/^	int32_t n_ambs;$/;"	m	struct:__anon1
n_holes	bntseq.h	/^	int32_t n_holes;$/;"	m	struct:__anon3
n_sa	bwt.h	/^	bwtint_t n_sa;$/;"	m	struct:__anon4
n_seqs	bntseq.h	/^	int32_t n_seqs;$/;"	m	struct:__anon3
name	bntseq.h	/^	char *name, *anno;$/;"	m	struct:__anon1
nst_color_space_table	bwtmisc.c	/^const int nst_color_space_table[] = { 4, 0, 0, 1, 0, 2, 3, 4, 0, 3, 2, 4, 1, 4,$/;"	v
numberOfIterationDone	bwt_gen.h	/^	unsigned int numberOfIterationDone;$/;"	m	struct:BWTInc
objs_dir	Makefile	/^objs_dir = objs$/;"	m
occMajorSizeInWord	bwt_gen.h	/^	unsigned int occMajorSizeInWord; \/\/ Temporary variable to hold the memory allocated$/;"	m	struct:BWT
occSizeInWord	bwt_gen.h	/^	unsigned int occSizeInWord; \/\/ Temporary variable to hold the memory allocated$/;"	m	struct:BWT
occValue	bwt_gen.h	/^	unsigned int *occValue; \/\/ Occurrence values stored explicitly$/;"	m	struct:BWT
occValueMajor	bwt_gen.h	/^	unsigned int *occValueMajor; \/\/ Occurrence values stored explicitly$/;"	m	struct:BWT
offset	bntseq.h	/^	int64_t offset;$/;"	m	struct:__anon1
offset	bntseq.h	/^	int64_t offset;$/;"	m	struct:__anon2
packedShift	bwt_gen.h	/^	unsigned int *packedShift;$/;"	m	struct:BWTInc
packedText	bwt_gen.h	/^	unsigned int *packedText;$/;"	m	struct:BWTInc
primary	bwt.h	/^	bwtint_t primary; \/\/ S^{-1}(0), or the primary index of BWT$/;"	m	struct:__anon4
s	kseq.h	/^	char *s;$/;"	m	struct:__kstring_t
sa	bwt.h	/^	bwtint_t *sa;$/;"	m	struct:__anon4
saIndexRange	bwt_gen.h	/^	SaIndexRange *saIndexRange; \/\/ SA index range$/;"	m	struct:BWT
saIndexRangeNumOfChar	bwt_gen.h	/^	int saIndexRangeNumOfChar; \/\/ Number of characters indexed in SA index range$/;"	m	struct:BWT
saIndexRangeSize	bwt_gen.h	/^	unsigned int saIndexRangeSize; \/\/ Temporary variable to hold the memory allocated$/;"	m	struct:BWT
saInterval	bwt_gen.h	/^	unsigned int saInterval; \/\/ interval between two SA values stored explicitly$/;"	m	struct:BWT
saValue	bwt_gen.h	/^	unsigned int *saValue; \/\/ SA values stored explicitly$/;"	m	struct:BWT
saValueOnBoundary	bwt_gen.h	/^	unsigned int *saValueOnBoundary; \/\/ Pre-calculated frequently referred data$/;"	m	struct:BWT
saValueSize	bwt_gen.h	/^	unsigned int saValueSize; \/\/ Temporary variable to hold the memory allocated$/;"	m	struct:BWT
sa_intv	bwt.h	/^	int sa_intv;$/;"	m	struct:__anon4
sais_main	is.c	/^static int sais_main(const unsigned char *T, int *SA, int fs, int n, int k,$/;"	f	file:
seed	bntseq.h	/^	uint32_t seed;$/;"	m	struct:__anon3
seq_len	bwt.h	/^	bwtint_t seq_len; \/\/ sequence length$/;"	m	struct:__anon4
src_dir	Makefile	/^src_dir = .$/;"	m
startSaIndex	bwt_gen.h	/^	unsigned int startSaIndex;$/;"	m	struct:SaIndexRange
swap	bwt_gen.h	54;"	d
target	Makefile	/^target=libdnaindexer.a$/;"	m
targetNBit	bwt_gen.h	/^	float targetNBit;$/;"	m	struct:BWTInc
targetTextLength	bwt_gen.h	/^	unsigned int targetTextLength;$/;"	m	struct:BWTInc
textBuffer	bwt_gen.h	/^	unsigned char *textBuffer;$/;"	m	struct:BWTInc
textLength	bwt_gen.h	/^	unsigned int textLength; \/\/ length of the text$/;"	m	struct:BWT
truncateLeft	bwt_gen.h	55;"	d
truncateRight	bwt_gen.h	56;"	d
ubyte_t	bntseq.h	/^typedef uint8_t ubyte_t;$/;"	t
ubyte_t	bwt.h	/^typedef unsigned char ubyte_t;$/;"	t
ubyte_t	is.c	/^typedef unsigned char ubyte_t;$/;"	t	file:
workingMemory	bwt_gen.h	/^	unsigned int *workingMemory;$/;"	m	struct:BWTInc
xassert	utils.h	37;"	d
xopen	utils.h	35;"	d
xzopen	utils.h	36;"	d
